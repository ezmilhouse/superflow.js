{"name":"Superflow.js","body":"# Superflow.js\r\na asynchronous flow controller\r\n\r\n## Motivation\r\nI needed something to handle my asynchronous flows in client applications. I\r\nlike [substack's sequencer for Node.js](https://github.com/substack/node-seq) a\r\nlot, so this is where the inspiration came from and therefore it basically\r\nfollows the same syntax.\r\n\r\n## Quickstart\r\n\r\n```js\r\n\r\n\r\n    // sequential\r\n\r\n    superflow\r\n        .seq('a', function() {\r\n\r\n            // sync\r\n            return 'a';\r\n\r\n        })\r\n        .seq('b', function(cb) {\r\n\r\n            // async\r\n            setTimeout(function() {\r\n                cb(null, 'b');\r\n            }, 1000);\r\n\r\n        })\r\n        .end(function() {\r\n            log('a,b', seq.vars);\r\n        });\r\n\r\n```\r\n\r\n```js\r\n\r\n\r\n    // parallel actions\r\n\r\n    superflow\r\n        .par('a', function() {\r\n\r\n            // sync\r\n            return 'a';\r\n\r\n        })\r\n        .par('b', function(cb) {\r\n\r\n            // async\r\n            setTimeout(function() {\r\n                cb(null, 'b');\r\n            }, 1000);\r\n\r\n        })\r\n        .end(function() {\r\n            log('a,b', seq.vars);\r\n        });\r\n\r\n```\r\n\r\n```js\r\n\r\n\r\n    // sequential & parallel actions\r\n\r\n    superflow\r\n        .seq('a', function() {\r\n\r\n            // sync\r\n            return 'a';\r\n\r\n        })\r\n        .par('b', function(cb) {\r\n\r\n            // async\r\n            setTimeout(function() {\r\n                cb(null, 'b');\r\n            }, 1000);\r\n\r\n        })\r\n        .par('c', function() {\r\n\r\n            // sync\r\n            return 'c';\r\n\r\n        })\r\n        .seq('d', function(cb) {\r\n\r\n            // async\r\n            setTimeout(function() {\r\n                cb(null, 'd');\r\n            }, 1000);\r\n\r\n        })\r\n        .end(function() {\r\n            log('a,b,c,d', seq.vars);\r\n        });\r\n\r\n```\r\n\r\n```js\r\n\r\n\r\n    // use set/get to return values\r\n\r\n    superflow\r\n        .seq(function() {\r\n\r\n            // sync\r\n            this.set('a', 'a');\r\n\r\n        })\r\n        .seq(function(cb) {\r\n\r\n            var that = this;\r\n\r\n            // async\r\n            setTimeout(function() {\r\n                that.set('b', 'b');\r\n                cb();\r\n            }, 1000);\r\n\r\n        })\r\n        .end(function() {\r\n\r\n            log('a', this.get('a'));\r\n            log('b', this.get('b'));\r\n\r\n        });\r\n\r\n```\r\n\r\n```js\r\n\r\n\r\n    // use .die() to kill a flow\r\n\r\n    superflow\r\n        .seq(function() {\r\n\r\n            this.set('a', 'a');\r\n\r\n        })\r\n        .seq(function() {\r\n\r\n            if (this.get('a') === 'a') {\r\n\r\n                // kill flow\r\n                this.die();\r\n\r\n            } else {\r\n\r\n                this.set('c', 'c');\r\n\r\n            }\r\n\r\n        })\r\n        .seq(function() {\r\n\r\n            this.set('c', 'c');\r\n\r\n        })\r\n        .end(function() {\r\n\r\n            log('a', this.get('a')); // will be 'a'\r\n            log('b', this.get('b')); // will be undefined\r\n            log('c', this.get('c')); // will be undefined\r\n\r\n        });\r\n\r\n```\r\n\r\n```js\r\n\r\n\r\n    // use conditional .die() to kill a flow, based on expression returning\r\n    // true or false\r\n\r\n    superflow\r\n        .seq(function() {\r\n\r\n            this.set('a', 'a');\r\n\r\n        })\r\n        .seq(function() {\r\n\r\n            // kill flow if expression (1st param) is `true`,\r\n            // otherwise return 2nd param\r\n            this.die(this.get('a') === 'a', 'c');\r\n\r\n        })\r\n        .seq(function() {\r\n\r\n            this.set('c', 'c');\r\n\r\n        })\r\n        .end(function() {\r\n\r\n            log('a', this.get('a')); // will be 'a'\r\n            log('b', this.get('b')); // will be undefined\r\n            log('c', this.get('c')); // will be undefined\r\n\r\n        });\r\n\r\n```\r\n\r\n```js\r\n\r\n\r\n    // use .die() as a chainable function\r\n\r\n    superflow\r\n        .seq(function() {\r\n\r\n            this.set('a', 'a');\r\n\r\n        })\r\n        .die(this.get('a') === 'a')\r\n        .seq(function() {\r\n\r\n            this.set('c', 'c');\r\n\r\n        })\r\n        .end(function() {\r\n\r\n            log('a', this.get('a')); // will be 'a'\r\n            log('b', this.get('b')); // will be undefined\r\n            log('c', this.get('c')); // will be undefined\r\n\r\n        });\r\n\r\n```\r\n\r\n```js\r\n\r\n\r\n    // use .die() with function as 2nd param to overwrite .end() function\r\n\r\n    superflow\r\n        .seq(function() {\r\n\r\n            this.set('a', 'a');\r\n\r\n        })\r\n        .die(this.get('a') === 'a', function() {\r\n\r\n            log('new .end()');\r\n            log('a', this.get('a')); // will be 'a'\r\n            log('b', this.get('b')); // will be undefined\r\n            log('c', this.get('c')); // will be undefined\r\n\r\n\r\n        })\r\n        .seq(function() {\r\n\r\n            this.set('c', 'c');\r\n\r\n        })\r\n        .end(function() {\r\n\r\n            log('a', this.get('a')); // will be 'a'\r\n            log('b', this.get('b')); // will be undefined\r\n            log('c', this.get('c')); // will be undefined\r\n\r\n        });\r\n\r\n```\r\n","tagline":"superflow.js - async flow control - 3K","google":"UA-2025332-8","note":"Don't delete this file! It's used internally to help with page regeneration."}